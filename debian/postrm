#!/bin/sh -e

#
# This script is executed in the post-removal phase
#
#   On Debian,
#       $1=remove    : indicates a removal
#       $1=purge     : indicates an upgrade
#


SOURCE_ENV_FILE=true
REMOVE_DIRS=false
REMOVE_USER_AND_GROUP=false

case "$1" in

    remove)
        REMOVE_DIRS=true
    ;;

    purge)
        REMOVE_USER_AND_GROUP=true
        SOURCE_ENV_FILE=false
    ;;
    failed-upgrade|abort-install|abort-upgrade|disappear|upgrade|disappear)
    ;;

    *)
        echo "post remove script called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# Sets the default values for okapi variables
OKAPI_USER="okapi"
OKAPI_GROUP="okapi"
LOG_DIR="/var/log/folio/okapi"
DATA_DIR="/var/lib/okapi"
CONF_DIR="/etc/folio/okapi"

# Source the default env file
if [ "$SOURCE_ENV_FILE" = "true" ]; then
    OKAPI_ENV_FILE="/etc/default/okapi"
    if [ -f "$OKAPI_ENV_FILE" ]; then
        . "$OKAPI_ENV_FILE"
    fi
fi

if [ "$REMOVE_DIRS" = "true" ]; then

    if [ -d "$LOG_DIR" ]; then
        echo -n "Deleting log directory..."
        rm -rf "$LOG_DIR"
        echo " OK"
    fi

    # Delete the data directory.
    if [ -d "$DATA_DIR" ]; then
        echo -n "Deleteing $DATA_DIR..."
        rm -rf "$DATA_DIR"
        echo " OK"
    fi

    # delete the conf directory if and only if empty
    if [ -d "$CONF_DIR" ]; then
        rmdir --ignore-fail-on-non-empty "$CONF_DIR"
    fi

fi

if [ "$REMOVE_USER_AND_GROUP" = "true" ]; then
    if id "$OKAPI_USER" > /dev/null 2>&1 ; then
        echo -n "Removing user, $OKAPI_USER..."
        userdel "$OKAPI_USER"
        echo " OK"
    fi

    if getent group "$OKAPI_GROUP" > /dev/null 2>&1 ; then
        echo -n "Removing group, $OKAPI_GROUP..."
        groupdel "$OKAPI_GROUP"
        echo " OK"
    fi
fi

exit 0

