Source: okapi
Section: net
Priority: extra
Maintainer: Index Data <support@indexdata.com>
Build-Depends: debhelper (>=9),
        openjdk-8-jdk,
        maven (>=3.3)
Standards-Version: 3.9.6
Homepage: https://github.com/folio-org/okapi

Package: okapi
Architecture: all
Depends: openjdk-8-jdk | openjdk-8-jre,
         jq,
         adduser,
         postgresql-client-common
Description:  Multitenant API gateway for FOLIO
 Okapi is an implementation of some different patterns commonly
 used within the microservice architecture. The most central of
 them is the so called "API Gateway" pattern which is implemented
 by the core Okapi 'proxy' service. Conceptually, the API Gateway
 is a server that is a single entry point into the system. It is
 similar to the Facade pattern from object-oriented design. Per
 the standard definition, which Okapi follows quite closely, the
 API Gateway encapsulates the internal system architecture and
 provides a unified API that may be tailored to each client; it
 might also include core responsibilities such as authentication,
 monitoring, load balancing, caching, request shaping and management,
 and static response handling: from the Message Queue design pattern
 to allow broadcasting of requests to multiple services (initially
 synchronously and eventually, possibly, asynchronously) and returning
 a final response. Finally, Okapi facilitates communication between
 services by acting as a Service Discovery tool: service A wanting to
 talk to service B only needs to know its HTTP interface since Okapi
 will inspect the registry of available services to locate the physical
 instance of the service.
